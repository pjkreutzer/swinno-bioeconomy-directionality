---
title: Shades of Green
subtitle: Direction of the Swedish Forest Innovation System 1970-2020
author: Jonas Kreutzer
date: last-modified
abstract: |
    
csl: https://zotero.org/styles/apa?source=1
bibliography: [../../swinno-shades-green.bib]

format:
  revealjs:
    theme: [../assets/revealme.scss]
    transition: none
    title-slide-attributes:
      data-background-image: '../assets/ground-fog-valley-black-forest-sunset.jpg'
      data-background-size: fit
      data-background-opacity: '0.3'
    embed-resources: true

execute:
    freeze: auto
    echo: false
jupyter: python3
---


# Three Visions for a Bioeconomy

:::: columns
::: {.column width="33%"}
![Bio-Technology Vision](../assets/Biotech.jpg){.fragment}
:::

::: {.column width="33%"}
![Bio-Resource Vision](../assets/Bioresource.jpg){.fragment}
:::

::: {.column width="33%"}
![Bio-Ecology Vision](../assets/Bioecology.jpg){.fragment}
:::
::::


[@bugge2016WhatBioeconomyReview]{.slide-cite style="font-size: x-small"}


## Research Questions {.fragment}

1. How innovative is the Swedish forest bioeconomy?
2. What visions of a bioeconomy are represented?
3. What eco-innovations are developed?


```{python}
# | label: Imports

import pandas as pd
import numpy as np
from IPython.display import display, Markdown

from src.figures import *
from src.utils import get_project_root, format_table
from src.swinno_helpers import connect_swinno_db

ROOT = get_project_root()
conn = connect_swinno_db()


pio.templates.default = "presentation"

# full code labels for merging


codes_df = pd.read_sql("SELECT * FROM classification_codes", conn)

codes_df["Category"] = codes_df["Category"].str.strip()
uncertain_eco = {"Code": "000", "Category": "Unsure"}
codes_df = codes_df.append(uncertain_eco, ignore_index=True)

codes_df = codes_df[~codes_df["Code"].duplicated(keep="last")]

codes_df = codes_df.set_index("Code")
```

```{python}
# | label: Query bioeconomy

bioeconomy = pd.read_sql(
    """
select
  i.sinno_id,
  i.innovation_name_in_swedish AS name,
  i.description_in_swedish AS description,
  i.additional_information_if_origin_new_scientific_discovery || i.additional_information_if_origin_new_technologies_or_materials || i.additional_info_if_origin_official_regulation_legislation_and_standards || i.additional_information_if_origin_solution_for_a_problem || i.additional_information_if_origin_performance || i.additional_information_if_origin_other AS info,
  i.year_of_commercialization AS year,
  us.use_sector
from
  innovation i
  join use_sectors us on i.sinno_id = us.sinno_id
where
  (
    us.use_sector like '02%'
    or us.use_sector like '20%'
    or us.use_sector like '21%'
    or us.use_sector like '36%'
    or product_code like '02%'
    or product_code like '20%'
    or product_code like '21%'
    or product_code like '36%'
  )
  or (
    description like '%virke%'
    or description like '%cellulos%'
    or description like '%lignin%'
    or description like '%spån%'
    or description like '%bark%'
    or description like '%levulinsyra%'
    or description like '%furfural%'
    or description like '%svarttjära%'
    or description like '%svartlut%'
    or description like '%växtbas%'
    or description like '%ved%'
    or description like '%trä%'
    or description like '%skog%'
    or description like '%biobränsle%'
    or description like '%biologisk%'
    or description like '%nedbrytbar%'
    or description like '%papper%'
    or description like '%pappret%'
    or description like '%karton%'
    or description like '%tencel%'
  );
""",
    conn,
)

sni_codes = pd.read_sql_query(
    """
select
*
from 
sni_codes
""",
    conn,
)

sni_codes = sni_codes.rename(columns={"code": "use_sector"})

swinno = pd.read_sql_query(
    """
select sinno_id, year_of_commercialization as year, innovation_name_in_swedish as name
from innovation;
""",
    conn,
)

swinno["bioeconomy"] = swinno["sinno_id"].isin(bioeconomy["sinno_id"].unique())


``` 

```{python}
# | label: Query eco-innovation

eco_innovations = pd.read_sql(
    """
SELECT
  sinno_id,
  innovation_type as innovation_type_code,
  c.Category as innovation_type
FROM
  eco_innovations
JOIN classification_codes AS c ON c.Code = eco_innovations.innovation_type
WHERE 
innovation_type NOT IN (701, 602, 601, 501, 111, 109, 108)
;
""",
    conn,
)

eco_innovations["innovation_type"] = eco_innovations["innovation_type"].str.strip()


```

```{python}
# | label: Query bioeconomy visions

bioeconomy_visions = pd.read_sql(
    """
SELECT bv.sinno_id
, codes.Category AS bioeconomy_vision
, i.year_of_commercialization AS "year"
FROM bioeconomy_visions AS bv
JOIN [classification_codes] AS codes ON codes.code = bv.bioeconomy_vision
JOIN innovation AS i ON i.sinno_id = bv.sinno_id
WHERE bv.sinno_id NOT IN (SELECT sinno_id FROM categorization_notes WHERE notes NOT LIKE "%not forest%")
UNION
SELECT DISTINCT(ei.sinno_id)
, 'Bioecology Vision' AS bioeconomy_vision
, i.year_of_commercialization AS "i.year"
FROM eco_innovations AS ei
JOIN innovation AS i ON i.sinno_id = ei.sinno_id
WHERE ei.innovation_type IN (206, 107)
AND ei.sinno_id NOT IN (
  SELECT ei2.sinno_id
  FROM eco_innovations as ei2
  WHERE ei2.innovation_type IN (999, '000')
  );
-- adds recycling innovation to bioecology
""",
    conn,
)

bioeconomy_visions.loc[
    bioeconomy_visions["bioeconomy_vision"] == "Not Bioeconomy",
    ["bioeconomy_vision"],
] = "No Bioeconomy Vision"

uncertain_bioeconomy_visions = bioeconomy_visions.query("bioeconomy_vision == 'Unsure'")


certain_bioeconomy_visions = bioeconomy_visions.loc[
    ~bioeconomy_visions["sinno_id"].isin(uncertain_bioeconomy_visions["sinno_id"]), :
]

count_certain_bioeconomy_visions = (
    certain_bioeconomy_visions.groupby(["year", "bioeconomy_vision"])
    .size()
    .reset_index(name="count")
)

total_certain_bioeconomy_visions = (
    count_certain_bioeconomy_visions.groupby("bioeconomy_vision")
    .agg("sum", numeric_only=True)
    .sort_values("count", ascending=False)
    .reset_index()
)

```

```{python}
# | label: Calculate Bioeconomy Share


def calculate_bioeconomy_share(swinno):
    df = swinno.copy()
    df = df[["sinno_id", "year", "bioeconomy"]]
    df = (
        df.groupby("year")
        .agg(
            total_count=("sinno_id", "nunique"), bioeconomy_count=("bioeconomy", "sum")
        )
        .reset_index()
    )
    df["bioeconomy_share"] = df["bioeconomy_count"] / df["total_count"]

    return df


bioeconomy_share = calculate_bioeconomy_share(swinno)
```

# Data{.inverted}
```{python}
# | label: Data
n_swinno = swinno["sinno_id"].nunique()

display(
    Markdown(
        f"""
  ## SWINNO -- A Swedish Innovation Output Database with {n_swinno} Innovations{{.smaller}}

  ### [5 Year MA]{{.text-royal-blue-800}} and [Yearly]{{.text-gray-600}}
  """
    )
)

plot_bioeconomy_trends_interactive(bioeconomy_share, "total_count")

```

## Bioeconomy Innovation Definition {.smaller}

::::{.columns}

:::{.column width="50%"}
**Using producer / user codes
**

|SNI Code | Description                            |
|--------:|:---------------------------------------|
|02       | Forestry and related services
|20       | Wood and wood product manufacturing except furniture
|21       | Pulp, paper and paper product manufacturing
|36       | Furniture manufacturing; other manufacturing
:::

:::{.column width="50%"}
**Adding keywords of value chain**

    - "virke",
    - "cellulos",
    - "lignin",
    - "spån", 
    - "bark",
    - "levulinsyra" (Levulinic acid),
    - "furfural" (Furfural),
    - "svarttjära",
    - "svartlut",
    - "växtbas",
    - "ved",
    - "trä",
    - "skog",
    - "papper",
    - "biobränsle",
    - "biologiskt",
    - "nedbrytbar",
    - "papper",
    - "pappret",
    - "karton",
    - "tencel",
:::

::::

[based on @wolfslehner2016ForestBioeconomyNew]{.slide-cite}

```{python}
# | label: Sum bioeconomy visions
# | output: asis

sum_bioeconomy_innovations = swinno["bioeconomy"].sum()

display(
    Markdown(
        f"# {sum_bioeconomy_innovations} Innovations in Forest Bioeconomy (Uncleaned){{.inverted}}"
    )
)


```

# Results{.inverted}

## Count of Bioeconomy Innovation
### [5 Year MA]{.text-royal-blue-800} and [Yearly]{.text-gray-600}
```{python}
# label: fig-bioeconomy_count


plot_bioeconomy_trends_interactive(
    bioeconomy_share, y="bioeconomy_count"
).update_layout(yaxis_range=[0, 35]).show()

```

## Share of Bioeconomy Innovation{.smaller}
### [5 Year MA]{.text-royal-blue-800} and [Yearly]{.text-gray-600}
```{python}

plot_bioeconomy_trends_interactive(bioeconomy_share, y="bioeconomy_share").update_yaxes(
    range=[0, 0.35], tickformat=".0%"
).show()

```


## Bioeconomy Vision Classification{.smaller .scrollable}
@bugge2016WhatBioeconomyReview

|  | Biotechnology | Bioresource | Bioecology |
|---|---|---|---|
| Aim &   Objectives | Economic growth & job   creation | Economic growth &   sustainability | Sustainability, biodiversity,   conservation of ecosystems, avoiding soil degradation |
| Value   Creation | Application of biotechnology,   commercialisation of research & technology | Conversion and upgrading of   bio-resources (process oriented) | Development of integrated   production systems and high-quality products with territorial identity |
| Drivers   & mediators of innovation | R & D, patents, TTOs,   Research councils and funders (Science push, linear model) | Interdisciplinary, optimisation   of land use, include degraded land in the production of biofuels, use and   availability of bio-resources, waste management, engineering, science &   market (Interactive & networked production mode) | Identification of favourable   organic agro-ecological practices, ethics, risk, transdisciplinary   sustainability, ecological interactions, re-use & recycling of waste,   land use, (Circular and self-sustained production mode) |

<style>
  tbl {
    fontsize=9;
  }
</style>

## Bioeconomy Vision Classification {.smaller}
@vivien2019HijackingBioeconomy

|  | Type II | Type III | Type I |
|---|---|---|---|
|  | A science-based economy driven   by industrial biotechnology<br>     <br>     The cell is a factory | Biomass replaces fossil fuels   and mining to produce energy and materials<br>     <br>     Biorefining at the heart of ecological transition (multilevel perspective). | An ecological economy, that is   compatible with the biosphere <br>     <br>     Counter-expertise rather than concrete technical solutions Criticism from   social groups who remain at the margins of decisionmaking centers |

## Preliminary Results

```{python}

n_certain_bioeconomy_visions = certain_bioeconomy_visions["sinno_id"].nunique()

display(
    Markdown(
        f"<span class='r-fit-text text-royal-blue-600'>{n_certain_bioeconomy_visions}</span> "
    )
)

```

unique forest bioeconomy innovations classified

## Trends in Bioeconomy Visions{.smaller}
<!-- ### [No Vision]{.text-gray-600}, [Bioecology]{style="color:#cc78bc;"}, [Bioresource]{style="color:#de8f05;"} and [Biotechnoloy]{style="color:#029e73;"}{.smaller} -->

```{python}
# | label: Trends in Bioeconomy Visions Figure

plot_bv_trends_interactive(count_certain_bioeconomy_visions).show()

```

```{python}
# | output: asis

recycle_innovation = pd.read_sql(
    """
SELECT *
FROM classification_codes
LEFT JOIN eco_innovations ON classification_codes.Code = eco_innovations.innovation_type
WHERE eco_innovations.innovation_type = 107 OR eco_innovations.innovation_type = 206 AND sinno_id NOT IN (SELECT sinno_id FROM categorization_notes WHERE notes LIKE '%not forest%')
""",
    conn,
)

recycle_innovation_count = recycle_innovation["sinno_id"].nunique()

n_bioecology_vision = count_certain_bioeconomy_visions.loc[
    count_certain_bioeconomy_visions["bioeconomy_vision"] == "Bioecology Vision",
    "count",
].sum()

display(
    Markdown(
        f"""
        :::{{.notes}} 
          {recycle_innovation_count} innovations involving either a product or process innovation related to recyling. Hence, {n_bioecology_vision - recycle_innovation_count} innovation are associated with the bioecology vision, without using or facilitating recycling. 
        :::
        """
    )
)

```


## Eco Innovations

```{python}

eco_innovation_merged_bv = certain_bioeconomy_visions.merge(
    eco_innovations, on="sinno_id", validate="many_to_many"
)

eco_innovation_by_bioeconomy_visions = (
    eco_innovation_merged_bv.groupby(["bioeconomy_vision", "innovation_type_code"])
    .size()
    .to_frame("count")
    .reset_index()
)

eco_innovation_by_bioeconomy_visions["innovation_type_group"] = np.where(
    eco_innovation_by_bioeconomy_visions["innovation_type_code"].str[0] == "1",
    "Product",
    np.where(
        eco_innovation_by_bioeconomy_visions["innovation_type_code"].str[0] == "2",
        "Process",
        np.where(
            eco_innovation_by_bioeconomy_visions["innovation_type_code"].str[0] == "3",
            "Organizational",
            np.where(
                eco_innovation_by_bioeconomy_visions["innovation_type_code"].str[0]
                == "4",
                "Marketing",
                "No Eco-Innovation",
            ),
        ),
    ),
)
```


```{python}
plot_eco_innovation_by_bioeconomy_vision_interactive(
    eco_innovation_by_bioeconomy_visions, codes_df
).show()

```


## Bioeconomy Vision Count by Sector Excluding Uncertains {.smaller}
```{python}
bv_sectors = pd.read_sql(
    """
SELECT
  c.Category AS vision,
  sni_codes.label AS sector,
  count(bv.bioeconomy_vision) AS count
FROM
  bioeconomy_visions AS bv
  join use_sectors ON bv.sinno_id = use_sectors.[sinno_id]
  join sni_codes ON SUBSTR(use_sectors.use_sector, 1, 2) = sni_codes.code
  join [classification_codes] AS c ON bv.bioeconomy_vision = c.Code
WHERE
  NOT EXISTS(
    SELECT
      *
    FROM
      bioeconomy_visions AS bv2
    WHERE
      bv2.sinno_id = bv.sinno_id
      AND bv2.bioeconomy_vision = 0
  )
  AND bv.sinno_id NOT IN (
    SELECT
      sinno_id
    FROM
      categorization_notes
    WHERE
      notes NOT LIKE "%not forest%"
  )
GROUP BY
  sector,
  bioeconomy_vision;
""",
    conn,
)

bv_matrix = prepare_heatmap_data(
    bv_sectors, index_col="sector", cols_col="vision", values_col="count"
)

plot_heatmap(bv_matrix)
```



## Uncertain Cases 

## References

:::{#refs}
:::

# Appendix

## Count of Bioeconomy Visions


```{python}


display(
    Markdown(
        count_certain_bioeconomy_visions.groupby("bioeconomy_vision")
        .agg("sum", numeric_only=True)
        .sort_values("count", ascending=False)
        .reset_index()
        .rename(columns={"bioeconomy_vision": "Vision", "count": "Count"})
        .to_markdown(index=False)
    )
)

```
